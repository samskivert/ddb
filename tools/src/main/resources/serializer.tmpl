  init {
    {{#metas}}
    {{#hasCustom}}
    register({{typeName}}.serializer)
    {{/hasCustom}}
    {{^hasCustom}}
    {{#isData}}
    {{#isEnum}}
    register(object : DSerializer<{{typeName}}>({{typeName}}::class.java) {
      override fun get (pcol :DProtocol, buf :ByteBuffer) =
        {{typeName}}.valueOf(buf.getString())
      override fun put (pcol :DProtocol, buf :ByteBuffer, obj :{{typeName}}) :Unit =
        buf.putString(obj.name)
    })
    {{/isEnum}}
    {{^isEnum}}
    register(object : DSerializer<{{typeName}}>({{typeName}}::class.java) {
      override fun get (pcol :DProtocol, buf :ByteBuffer) = {{typeName}}{{^isObject}}(
        {{#realProps}}
        {{getter}}{{^-last}},{{/-last}}
        {{/realProps}}
      ){{/isObject}}
      override fun put (pcol :DProtocol, buf :ByteBuffer, obj :{{typeName}}) {
        {{#realProps}}
        {{setter}}
        {{/realProps}}
      }
    })
    {{/isEnum}}
    {{/isData}}
    {{#isEntity}}
    register(object : DEntitySerializer<{{typeName}}>({{typeName}}::class.java) {
      {{^isAbstract}}
      override fun create (id :Long) = {{typeName}}(id)
      {{/isAbstract}}
      {{#isEntityChild}}
      override val parent = {{superName}}::class.java
      {{/isEntityChild}}
      override val props = listOf<DEntity.Meta.Prop<*>>(
      {{#delegateProps}}
        {{entityTypeName}}.{{metaName}}{{^-last}},{{/-last}}
      {{/delegateProps}}
      )
    })
    {{/isEntity}}
    {{/hasCustom}}
    {{#isService}}
    register(object : DService.Factory<{{typeName}}>({{typeName}}::class.java) {
      override fun marshaller (host :DService.Host) = object : DService.Marshaller<{{typeName}}>(id), {{typeName}} {
        {{#methods}}
        override fun {{methName}} ({{#args}}{{name}} :{{type}}{{^-last}}, {{/-last}}{{/args}}) :RFuture<{{returnType}}> {
          val result = RPromise.create<{{returnType}}>()
          host.call(DMessage.ServiceReq(host.id, svcId, {{-index}}, host.nextReqId(), listOf({{#args}}{{name}}{{^-last}}, {{/-last}}{{/args}})), result)
          return result
        }
        {{/methods}}
      }
      override fun dispatcher (impl :{{typeName}}) = object : DService.Dispatcher(id) {
        override fun dispatch (req :DMessage.ServiceReq) :RFuture<out Any> {
          return when (req.methId.toInt()) {
            {{#methods}}
            {{-index}} -> impl.{{methName}}({{#args}}req.args[{{-index}}-1] as {{type}}{{^-last}}, {{/-last}}{{/args}})
            {{/methods}}
            else -> unknown(req.methId, impl)
          }
        }
      }
    })
    {{/isService}}
    {{/metas}}
  }
