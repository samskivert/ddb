  init {
    {{#metas}}
    {{#hasCustom}}
    register({{typeName}}.serializer)
    {{/hasCustom}}
    {{^hasCustom}}
    {{#isData}}
    {{#isEnum}}
    register(object : DSerializer<{{typeName}}>({{typeName}}::class.java) {
      override fun get (pcol :DProtocol, buf :ByteBuffer) =
        {{typeName}}.valueOf(buf.getString())
      override fun put (pcol :DProtocol, buf :ByteBuffer, obj :{{typeName}}) :Unit =
        buf.putString(obj.name)
    })
    {{/isEnum}}
    {{^isEnum}}
    register(object : DSerializer<{{typeName}}>({{typeName}}::class.java) {
      override fun get (pcol :DProtocol, buf :ByteBuffer) = {{typeName}}{{^isObject}}(
        {{#realProps}}
        {{getter}}{{^-last}},{{/-last}}
        {{/realProps}}
      ){{/isObject}}
      override fun put (pcol :DProtocol, buf :ByteBuffer, obj :{{typeName}}) {
        {{#realProps}}
        {{setter}}
        {{/realProps}}
      }
    })
    {{/isEnum}}
    {{/isData}}
    {{#isEntity}}
    register(object : DEntitySerializer<{{typeName}}>({{typeName}}::class.java) {
      {{^isAbstract}}
      override fun create (id :Long) = {{typeName}}(id)
      {{/isAbstract}}
      {{#isEntityChild}}
      override val parent = {{superName}}::class.java
      {{/isEntityChild}}
      override val props = listOf<DEntity.Meta.Prop<*>>(
      {{#delegateProps}}
        {{entityTypeName}}.{{metaName}}{{^-last}},{{/-last}}
      {{/delegateProps}}
      )
    })
    {{/isEntity}}
    {{/hasCustom}}
    {{/metas}}
  }
